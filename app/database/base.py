from pymongo import MongoClient
from app.core.config import settings
from app.models.role import Role
from app.models.user import RealUser, LegalUser
from app.models.province import Province, City
from typing import Any, List, Union
from app.database import errors
from app.types.fields import CompanyCodeField, NationalCodeField, UserType
from app.core.config import settings


class BaseRoleStorage:
    def __init__(self, db): ...

    def create(self, role: Role) -> Role: ... 

    def get_all(self) -> List[Role]: ...

    def get_by_platform(self, platform: str) -> Role: ...

    def delete_by_id(self, role_id: str): ...


class BaseUserStorage:
    def __init__(self, db): ...

    def create(self, user: Union[RealUser, LegalUser]) -> Union[RealUser, LegalUser]: ...
        
    def update_last_login(self, user: Union[RealUser, LegalUser]): ...

    def get_all(self) -> Union[RealUser, LegalUser]: ...

    def get_by_national_code(self, national_code: NationalCodeField) -> RealUser: ...

    def get_by_company_code(self, company_code: CompanyCodeField) -> LegalUser: ...

    def get_first(self) -> Union[RealUser, LegalUser]: ...

    def check_by_national_code(self, national_code: NationalCodeField) -> bool: ...

    def check_by_company_code(self, company_code: CompanyCodeField) -> bool: ...

    def get_by_id(self, user_id: str) -> Union[RealUser, LegalUser, None]: ...

    def update(self, user: Union[RealUser, LegalUser]): ...
 

class BaseProvinceStorage:
    def __init__(self, db):...

    def create(self, province: Province) -> Province: ...

    def get_all(self) -> List[Province]: ...

    def get_by_city_id(self, city_id: str) -> Province: ... 

    def get_city_id_by_name(self, name: str) -> Province: ...


class BaseDatabase:
    """ Base Database Interface. """
    roles: BaseRoleStorage
    users: BaseUserStorage
    provinces: BaseProvinceStorage

    def check_connection(self):
        raise errors.DatabaseConnectionError("database is not initiated.")

